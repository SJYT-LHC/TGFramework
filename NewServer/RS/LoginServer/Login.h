// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __LOGIN_H_
#define __LOGIN_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace ServerEngine
{
    enum enRet
    {
        enRet_OK = 0,
        enRet_FAIL = 1,
    };
    inline string etos(const enRet & e)
    {
        switch(e)
        {
            case enRet_OK: return "enRet_OK";
            case enRet_FAIL: return "enRet_FAIL";
            default: return "";
        }
    }
    inline int stoe(const string & s, enRet & e)
    {
        if(s == "enRet_OK")  { e=enRet_OK; return 0;}
        if(s == "enRet_FAIL")  { e=enRet_FAIL; return 0;}

        return -1;
    }

    struct LoginSession : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LoginSession";
        }
        static string MD5()
        {
            return "db6cee365bae550163f0d03a07a8a02f";
        }
        LoginSession()
        :dwGatewayID(0),loginTempID(0),strIp(""),wdPort(0),accid(0),uid(0),state(0),strPassWd(""),strAccount(""),strName("")
        {
        }
        void resetDefautlt()
        {
            dwGatewayID = 0;
            loginTempID = 0;
            strIp = "";
            wdPort = 0;
            accid = 0;
            uid = 0;
            state = 0;
            strPassWd = "";
            strAccount = "";
            strName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(dwGatewayID, 0);
            _os.write(loginTempID, 1);
            _os.write(strIp, 2);
            _os.write(wdPort, 3);
            if (accid != 0)
            {
                _os.write(accid, 4);
            }
            if (uid != 0)
            {
                _os.write(uid, 5);
            }
            _os.write(state, 6);
            _os.write(strPassWd, 7);
            if (strAccount != "")
            {
                _os.write(strAccount, 8);
            }
            if (strName != "")
            {
                _os.write(strName, 9);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwGatewayID, 0, true);
            _is.read(loginTempID, 1, true);
            _is.read(strIp, 2, true);
            _is.read(wdPort, 3, true);
            _is.read(accid, 4, false);
            _is.read(uid, 5, false);
            _is.read(state, 6, true);
            _is.read(strPassWd, 7, true);
            _is.read(strAccount, 8, false);
            _is.read(strName, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(dwGatewayID,"dwGatewayID");
            _ds.display(loginTempID,"loginTempID");
            _ds.display(strIp,"strIp");
            _ds.display(wdPort,"wdPort");
            _ds.display(accid,"accid");
            _ds.display(uid,"uid");
            _ds.display(state,"state");
            _ds.display(strPassWd,"strPassWd");
            _ds.display(strAccount,"strAccount");
            _ds.display(strName,"strName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(dwGatewayID, true);
            _ds.displaySimple(loginTempID, true);
            _ds.displaySimple(strIp, true);
            _ds.displaySimple(wdPort, true);
            _ds.displaySimple(accid, true);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(strPassWd, true);
            _ds.displaySimple(strAccount, true);
            _ds.displaySimple(strName, false);
            return _os;
        }
    public:
        tars::Int32 dwGatewayID;
        tars::Int32 loginTempID;
        std::string strIp;
        tars::Int32 wdPort;
        tars::Int32 accid;
        tars::Int32 uid;
        tars::Int32 state;
        std::string strPassWd;
        std::string strAccount;
        std::string strName;
    };
    inline bool operator==(const LoginSession&l, const LoginSession&r)
    {
        return l.dwGatewayID == r.dwGatewayID && l.loginTempID == r.loginTempID && l.strIp == r.strIp && l.wdPort == r.wdPort && l.accid == r.accid && l.uid == r.uid && l.state == r.state && l.strPassWd == r.strPassWd && l.strAccount == r.strAccount && l.strName == r.strName;
    }
    inline bool operator!=(const LoginSession&l, const LoginSession&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class LoginPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~LoginPrxCallback(){}
        virtual void callback_lockUser(tars::Int32 ret, tars::Int64 lockTime,  const std::string& tip)
        { throw std::runtime_error("callback_lockUser() override incorrect."); }
        virtual void callback_lockUser_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_lockUser_exception() override incorrect."); }

        virtual void callback_modifyAccid(tars::Int32 ret,  const std::string& tip)
        { throw std::runtime_error("callback_modifyAccid() override incorrect."); }
        virtual void callback_modifyAccid_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_modifyAccid_exception() override incorrect."); }

        virtual void callback_modifyMobile(tars::Int32 ret,  const std::string& tip)
        { throw std::runtime_error("callback_modifyMobile() override incorrect."); }
        virtual void callback_modifyMobile_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_modifyMobile_exception() override incorrect."); }

        virtual void callback_modifyPassWord(tars::Int32 ret,  const std::string& tip)
        { throw std::runtime_error("callback_modifyPassWord() override incorrect."); }
        virtual void callback_modifyPassWord_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_modifyPassWord_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Login_all[]=
            {
                "lockUser",
                "modifyAccid",
                "modifyMobile",
                "modifyPassWord"
            };
            pair<string*, string*> r = equal_range(__Login_all, __Login_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Login_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_lockUser_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    tars::Int64 lockTime;
                    _is.read(lockTime, 4, true);
                    std::string tip;
                    _is.read(tip, 5, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_lockUser(_ret, lockTime, tip);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyAccid_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string tip;
                    _is.read(tip, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_modifyAccid(_ret, tip);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyMobile_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string tip;
                    _is.read(tip, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_modifyMobile(_ret, tip);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyPassWord_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string tip;
                    _is.read(tip, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_modifyPassWord(_ret, tip);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<LoginPrxCallback> LoginPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class LoginPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~LoginPrxCallbackPromise(){}
    public:
        struct PromiselockUser: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            tars::Int64 lockTime;
            std::string tip;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LoginPrxCallbackPromise::PromiselockUser > PromiselockUserPtr;

        LoginPrxCallbackPromise(const promise::Promise< LoginPrxCallbackPromise::PromiselockUserPtr > &promise)
        : _promise_lockUser(promise)
        {}
        
        virtual void callback_lockUser(const LoginPrxCallbackPromise::PromiselockUserPtr &ptr)
        {
            _promise_lockUser.setValue(ptr);
        }
        virtual void callback_lockUser_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:lockUser_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_lockUser.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LoginPrxCallbackPromise::PromiselockUserPtr > _promise_lockUser;

    public:
        struct PromisemodifyAccid: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string tip;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LoginPrxCallbackPromise::PromisemodifyAccid > PromisemodifyAccidPtr;

        LoginPrxCallbackPromise(const promise::Promise< LoginPrxCallbackPromise::PromisemodifyAccidPtr > &promise)
        : _promise_modifyAccid(promise)
        {}
        
        virtual void callback_modifyAccid(const LoginPrxCallbackPromise::PromisemodifyAccidPtr &ptr)
        {
            _promise_modifyAccid.setValue(ptr);
        }
        virtual void callback_modifyAccid_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:modifyAccid_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_modifyAccid.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LoginPrxCallbackPromise::PromisemodifyAccidPtr > _promise_modifyAccid;

    public:
        struct PromisemodifyMobile: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string tip;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LoginPrxCallbackPromise::PromisemodifyMobile > PromisemodifyMobilePtr;

        LoginPrxCallbackPromise(const promise::Promise< LoginPrxCallbackPromise::PromisemodifyMobilePtr > &promise)
        : _promise_modifyMobile(promise)
        {}
        
        virtual void callback_modifyMobile(const LoginPrxCallbackPromise::PromisemodifyMobilePtr &ptr)
        {
            _promise_modifyMobile.setValue(ptr);
        }
        virtual void callback_modifyMobile_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:modifyMobile_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_modifyMobile.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LoginPrxCallbackPromise::PromisemodifyMobilePtr > _promise_modifyMobile;

    public:
        struct PromisemodifyPassWord: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string tip;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LoginPrxCallbackPromise::PromisemodifyPassWord > PromisemodifyPassWordPtr;

        LoginPrxCallbackPromise(const promise::Promise< LoginPrxCallbackPromise::PromisemodifyPassWordPtr > &promise)
        : _promise_modifyPassWord(promise)
        {}
        
        virtual void callback_modifyPassWord(const LoginPrxCallbackPromise::PromisemodifyPassWordPtr &ptr)
        {
            _promise_modifyPassWord.setValue(ptr);
        }
        virtual void callback_modifyPassWord_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:modifyPassWord_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_modifyPassWord.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LoginPrxCallbackPromise::PromisemodifyPassWordPtr > _promise_modifyPassWord;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Login_all[]=
            {
                "lockUser",
                "modifyAccid",
                "modifyMobile",
                "modifyPassWord"
            };

            pair<string*, string*> r = equal_range(__Login_all, __Login_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Login_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_lockUser_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    LoginPrxCallbackPromise::PromiselockUserPtr ptr = new LoginPrxCallbackPromise::PromiselockUser();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->lockTime, 4, true);
                        _is.read(ptr->tip, 5, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_lockUser_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_lockUser_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_lockUser(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyAccid_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    LoginPrxCallbackPromise::PromisemodifyAccidPtr ptr = new LoginPrxCallbackPromise::PromisemodifyAccid();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->tip, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyAccid_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyAccid_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_modifyAccid(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyMobile_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    LoginPrxCallbackPromise::PromisemodifyMobilePtr ptr = new LoginPrxCallbackPromise::PromisemodifyMobile();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->tip, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyMobile_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyMobile_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_modifyMobile(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyPassWord_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    LoginPrxCallbackPromise::PromisemodifyPassWordPtr ptr = new LoginPrxCallbackPromise::PromisemodifyPassWord();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->tip, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyPassWord_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyPassWord_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_modifyPassWord(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<LoginPrxCallbackPromise> LoginPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class LoginCoroPrxCallback: public LoginPrxCallback
    {
    public:
        virtual ~LoginCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Login_all[]=
            {
                "lockUser",
                "modifyAccid",
                "modifyMobile",
                "modifyPassWord"
            };

            pair<string*, string*> r = equal_range(__Login_all, __Login_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Login_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_lockUser_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        tars::Int64 lockTime;
                        _is.read(lockTime, 4, true);
                        std::string tip;
                        _is.read(tip, 5, true);
                        setResponseContext(msg->response.context);

                        callback_lockUser(_ret, lockTime, tip);

                    }
                    catch(std::exception &ex)
                    {
                        callback_lockUser_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_lockUser_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyAccid_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string tip;
                        _is.read(tip, 3, true);
                        setResponseContext(msg->response.context);

                        callback_modifyAccid(_ret, tip);

                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyAccid_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyAccid_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyMobile_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string tip;
                        _is.read(tip, 3, true);
                        setResponseContext(msg->response.context);

                        callback_modifyMobile(_ret, tip);

                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyMobile_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyMobile_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_modifyPassWord_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string tip;
                        _is.read(tip, 3, true);
                        setResponseContext(msg->response.context);

                        callback_modifyPassWord(_ret, tip);

                    }
                    catch(std::exception &ex)
                    {
                        callback_modifyPassWord_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_modifyPassWord_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<LoginCoroPrxCallback> LoginCoroPrxCallbackPtr;

    /* proxy for client */
    class LoginProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 lockUser(tars::Int32 userid,tars::Int32 NewLockState,tars::Int32 lockMin,tars::Int64 &lockTime,std::string &tip,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(NewLockState, 2);
            _os.write(lockMin, 3);
            _os.write(lockTime, 4);
            _os.write(tip, 5);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"lockUser", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(lockTime, 4, true);
            _is.read(tip, 5, true);
            return _ret;
        }

        void async_lockUser(LoginPrxCallbackPtr callback,tars::Int32 userid,tars::Int32 NewLockState,tars::Int32 lockMin,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(NewLockState, 2);
            _os.write(lockMin, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"lockUser", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< LoginPrxCallbackPromise::PromiselockUserPtr > promise_async_lockUser(tars::Int32 userid,tars::Int32 NewLockState,tars::Int32 lockMin,const map<string, string>& context)
        {
            promise::Promise< LoginPrxCallbackPromise::PromiselockUserPtr > promise;
            LoginPrxCallbackPromisePtr callback = new LoginPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(NewLockState, 2);
            _os.write(lockMin, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"lockUser", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_lockUser(LoginCoroPrxCallbackPtr callback,tars::Int32 userid,tars::Int32 NewLockState,tars::Int32 lockMin,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(NewLockState, 2);
            _os.write(lockMin, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"lockUser", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 modifyAccid(tars::Int32 userid,tars::Int32 newAccid,std::string &tip,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newAccid, 2);
            _os.write(tip, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"modifyAccid", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(tip, 3, true);
            return _ret;
        }

        void async_modifyAccid(LoginPrxCallbackPtr callback,tars::Int32 userid,tars::Int32 newAccid,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newAccid, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyAccid", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< LoginPrxCallbackPromise::PromisemodifyAccidPtr > promise_async_modifyAccid(tars::Int32 userid,tars::Int32 newAccid,const map<string, string>& context)
        {
            promise::Promise< LoginPrxCallbackPromise::PromisemodifyAccidPtr > promise;
            LoginPrxCallbackPromisePtr callback = new LoginPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newAccid, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyAccid", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_modifyAccid(LoginCoroPrxCallbackPtr callback,tars::Int32 userid,tars::Int32 newAccid,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newAccid, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyAccid", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 modifyMobile(tars::Int32 userid,const std::string & newMobile,std::string &tip,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newMobile, 2);
            _os.write(tip, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"modifyMobile", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(tip, 3, true);
            return _ret;
        }

        void async_modifyMobile(LoginPrxCallbackPtr callback,tars::Int32 userid,const std::string &newMobile,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newMobile, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyMobile", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< LoginPrxCallbackPromise::PromisemodifyMobilePtr > promise_async_modifyMobile(tars::Int32 userid,const std::string &newMobile,const map<string, string>& context)
        {
            promise::Promise< LoginPrxCallbackPromise::PromisemodifyMobilePtr > promise;
            LoginPrxCallbackPromisePtr callback = new LoginPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newMobile, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyMobile", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_modifyMobile(LoginCoroPrxCallbackPtr callback,tars::Int32 userid,const std::string &newMobile,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newMobile, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyMobile", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 modifyPassWord(tars::Int32 userid,const std::string & newPassWd,std::string &tip,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newPassWd, 2);
            _os.write(tip, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"modifyPassWord", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(tip, 3, true);
            return _ret;
        }

        void async_modifyPassWord(LoginPrxCallbackPtr callback,tars::Int32 userid,const std::string &newPassWd,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newPassWd, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyPassWord", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< LoginPrxCallbackPromise::PromisemodifyPassWordPtr > promise_async_modifyPassWord(tars::Int32 userid,const std::string &newPassWd,const map<string, string>& context)
        {
            promise::Promise< LoginPrxCallbackPromise::PromisemodifyPassWordPtr > promise;
            LoginPrxCallbackPromisePtr callback = new LoginPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newPassWd, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyPassWord", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_modifyPassWord(LoginCoroPrxCallbackPtr callback,tars::Int32 userid,const std::string &newPassWd,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(userid, 1);
            _os.write(newPassWd, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"modifyPassWord", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        LoginProxy* tars_hash(int64_t key)
        {
            return (LoginProxy*)ServantProxy::tars_hash(key);
        }

        LoginProxy* tars_consistent_hash(int64_t key)
        {
            return (LoginProxy*)ServantProxy::tars_consistent_hash(key);
        }

        LoginProxy* tars_set_timeout(int msecond)
        {
            return (LoginProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<LoginProxy> LoginPrx;

    /* servant for server */
    class Login : public tars::Servant
    {
    public:
        virtual ~Login(){}
        virtual tars::Int32 lockUser(tars::Int32 userid,tars::Int32 NewLockState,tars::Int32 lockMin,tars::Int64 &lockTime,std::string &tip,tars::TarsCurrentPtr current) = 0;
        static void async_response_lockUser(tars::TarsCurrentPtr current, tars::Int32 _ret, tars::Int64 lockTime, const std::string &tip)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("lockTime", lockTime);
                tarsAttr.put("tip", tip);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(lockTime, 4);

                _os.write(tip, 5);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 modifyAccid(tars::Int32 userid,tars::Int32 newAccid,std::string &tip,tars::TarsCurrentPtr current) = 0;
        static void async_response_modifyAccid(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &tip)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tip", tip);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(tip, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 modifyMobile(tars::Int32 userid,const std::string & newMobile,std::string &tip,tars::TarsCurrentPtr current) = 0;
        static void async_response_modifyMobile(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &tip)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tip", tip);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(tip, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 modifyPassWord(tars::Int32 userid,const std::string & newPassWd,std::string &tip,tars::TarsCurrentPtr current) = 0;
        static void async_response_modifyPassWord(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &tip)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tip", tip);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(tip, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __ServerEngine__Login_all[]=
            {
                "lockUser",
                "modifyAccid",
                "modifyMobile",
                "modifyPassWord"
            };

            pair<string*, string*> r = equal_range(__ServerEngine__Login_all, __ServerEngine__Login_all+4, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __ServerEngine__Login_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 userid;
                    tars::Int32 NewLockState;
                    tars::Int32 lockMin;
                    tars::Int64 lockTime;
                    std::string tip;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("userid", userid);
                        tarsAttr.get("NewLockState", NewLockState);
                        tarsAttr.get("lockMin", lockMin);
                        tarsAttr.getByDefault("lockTime", lockTime, lockTime);
                        tarsAttr.getByDefault("tip", tip, tip);
                    }
                    else
                    {
                        _is.read(userid, 1, true);
                        _is.read(NewLockState, 2, true);
                        _is.read(lockMin, 3, true);
                        _is.read(lockTime, 4, false);
                        _is.read(tip, 5, false);
                    }
                    tars::Int32 _ret = lockUser(userid,NewLockState,lockMin,lockTime,tip, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("lockTime", lockTime);
                            tarsAttr.put("tip", tip);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(lockTime, 4);
                            _os.write(tip, 5);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 userid;
                    tars::Int32 newAccid;
                    std::string tip;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("userid", userid);
                        tarsAttr.get("newAccid", newAccid);
                        tarsAttr.getByDefault("tip", tip, tip);
                    }
                    else
                    {
                        _is.read(userid, 1, true);
                        _is.read(newAccid, 2, true);
                        _is.read(tip, 3, false);
                    }
                    tars::Int32 _ret = modifyAccid(userid,newAccid,tip, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tip", tip);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(tip, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 userid;
                    std::string newMobile;
                    std::string tip;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("userid", userid);
                        tarsAttr.get("newMobile", newMobile);
                        tarsAttr.getByDefault("tip", tip, tip);
                    }
                    else
                    {
                        _is.read(userid, 1, true);
                        _is.read(newMobile, 2, true);
                        _is.read(tip, 3, false);
                    }
                    tars::Int32 _ret = modifyMobile(userid,newMobile,tip, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tip", tip);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(tip, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 userid;
                    std::string newPassWd;
                    std::string tip;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("userid", userid);
                        tarsAttr.get("newPassWd", newPassWd);
                        tarsAttr.getByDefault("tip", tip, tip);
                    }
                    else
                    {
                        _is.read(userid, 1, true);
                        _is.read(newPassWd, 2, true);
                        _is.read(tip, 3, false);
                    }
                    tars::Int32 _ret = modifyPassWord(userid,newPassWd,tip, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tip", tip);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(tip, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
